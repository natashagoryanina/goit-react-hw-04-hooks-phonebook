{"version":3,"sources":["Components/contactsForm/ContactsFormStyled.js","Components/contactsForm/ContactsForm.js","Components/contactsListItem/ContactsListItemStyled.js","Components/contactsListItem/ContactsListItem.js","Components/contactsList/ContactsListStyled.js","Components/contactsList/ContactsList.js","Components/filter/FilterStyled.js","Components/filter/Filter.js","styles/globalStyles.js","Components/App.js","index.js"],"names":["FormContainer","styled","form","initialState","name","number","ContactsForm","addContact","useState","contactsForm","setContactsForm","onFormChange","e","target","value","prev","onSubmit","preventDefault","id","uuidv4","className","type","onChange","pattern","title","required","ContactsListItemContainer","li","ContactsListItem","contact","removeContactById","onClick","ContactsListContainer","ul","ContactsList","contacts","map","FilterContainer","label","Filter","GlobalStyles","createGlobalStyle","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","visibleContacts","normalizedFilter","toLowerCase","includes","contactsFilter","some","item","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a7c6838.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    flex-direction: column;\n\n    .formLabel {\n        margin-bottom: 20px;\n    }\n\n    .formInput {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        height: 25px;\n    }\n\n    .formText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .addContactBtn {\n        width: 100px;\n    }\n\n`","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FormContainer } from './ContactsFormStyled';\n\nconst initialState = { \n    name: '',\n    number: ''\n};\n\nconst ContactsForm = ({addContact}) => {\n    const [contactsForm, setContactsForm] = useState(initialState);\n\n    const onFormChange = (e) => {\n        const {name, value} = e.target;\n        setContactsForm((prev)=>({...prev, [name]: value }));\n    };\n\n    const onFormSubmit = (e) => {\n        const {name, number} = contactsForm;\n        e.preventDefault();\n        addContact({name: name, id:uuidv4(), number: number});\n    };\n\n    return (\n        <FormContainer onSubmit={onFormSubmit}>\n                <span className=\"formText\">Name:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"text\"\n                        name=\"name\"\n                        onChange={onFormChange}\n                        value={contactsForm.name}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </label>\n                <span className=\"formText\">Number:</span>\n                <label className=\"formLabel\">\n                    <input\n                        className=\"formInput\"\n                        type=\"tel\"\n                        name=\"number\"\n                        onChange={onFormChange}\n                        value={contactsForm.number}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        />\n                </label>\n                <button className=\"addContactBtn\" type=\"submit\">\n                    Add contact\n                </button>\n        </FormContainer>\n    );\n};\n\nexport default ContactsForm;\n","import styled from 'styled-components';\n\nconst ContactsListItemContainer = styled.li`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    margin-bottom: 15px;\n    font-size: 16px;\n    line-height: 29px;\n\n    .deleteBtn {\n        width: 65px;\n        margin-left: 10px;\n        margin-bottom: 0;\n    }\n`;\n\nexport default ContactsListItemContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactsListItemContainer from './ContactsListItemStyled';\n\nconst ContactsListItem = ({contact, removeContactById}) => {\n    const remove = () => removeContactById(contact.id);\n    return (\n        <ContactsListItemContainer>\n            <span>{contact.name}: {contact.number}</span>\n            <button className=\"deleteBtn\" type=\"button\" onClick={remove}>Delete</button>\n        </ContactsListItemContainer>\n    );\n};\n\nContactsListItem.propTypes = {\n    contact: PropTypes.object,\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsListItem;","import styled from 'styled-components';\n\nconst ContactsListContainer = styled.ul`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default ContactsListContainer;","import React from 'react';\nimport ContactsListItem from '../contactsListItem/ContactsListItem';\nimport PropTypes from 'prop-types';\nimport ContactsListContainer from './ContactsListStyled';\n\nconst ContactsList = ({contacts, removeContactById}) => {\n    return (\n        <ContactsListContainer>\n            {contacts.map((contact)=> \n                <ContactsListItem contact={contact} removeContactById={removeContactById}/>\n            )}\n        </ContactsListContainer>\n    );\n};\n\nContactsList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsList;\n\n","import styled from 'styled-components';\n\nconst FilterContainer = styled.label`\n    display: flex;\n    flex-direction: column;\n\n    .filterText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .filterInput{\n        height: 25px;\n        width: 151px;\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        margin-bottom: 20px;\n    }\n`;\n\nexport default FilterContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FilterContainer from './FilterStyled';\n\n\nconst Filter = ({value, onChange}) => {\n    return (\n        <FilterContainer>\n            <span className=\"filterText\">Find contacts by name</span>\n            <input \n                className=\"filterInput\"\n                type=\"text\" \n                name=\"filter\"\n                value={value}\n                onChange={onChange}\n            />\n        </FilterContainer>\n    );\n};\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default Filter;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        font-family: \"Amazon Ember\",sans-serif;\n        padding: 25px;\n    }\n\n    ul{\n        list-style: none;\n        padding: 0;\n    }\n\n    button {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        display: flex;\n        margin-bottom: 20px;\n        font-family: \"Amazon Ember\",sans-serif;\n        font-size: 13px;\n        line-height: 29px;\n        padding: 0 10px 0 11px;\n        position: relative;\n        text-align: center;\n        text-decoration: none;\n        vertical-align: middle;\n    }\n\n    button:hover {\n        background-color: #f7fafa;\n    }\n\n    button:focus {\n        border-color: #008296;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        outline: 0;\n    }\n\n    h1,\n    h2 {\n        margin-top: 0;\n    }\n`;\n\nexport default GlobalStyles;","import React, { useState, useEffect } from 'react';\nimport ContactsForm from './contactsForm/ContactsForm';\nimport ContactsList from './contactsList/ContactsList';\nimport Filter from './filter/Filter';\nimport GlobalStyles from '../styles/globalStyles';\n\nconst App = () => {\n    const [contacts, setContacts] = useState(JSON.parse(window.localStorage.getItem('contacts')) ?? []);\n    const [filter, setFilter] = useState('');\n \n    useEffect(() => {\n        window.localStorage.setItem('contacts', JSON.stringify(contacts));\n        \n    }, [contacts]);\n\n    const addContact = (contact) => {\n        const isCopy = contacts.some((item) => \n               item.name.toLowerCase() === contact.name.toLowerCase()\n            );\n        if(isCopy) {\n            alert(`${contact.name} is already in contacts.`);\n            return;\n        }\n        setContacts((prev) => [...prev, contact]);\n    };\n\n    const removeContactById = (id) => {\n        setContacts((prev) => [...prev.contacts.filter(contact => contact.id !== id)]);\n    };\n\n    const onFilterChange = (e) => {\n        const {name, value} = e.target;\n        setFilter({ [name]: value });\n    };\n\n    const contactsFilter = (e) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => \n            contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    };\n\n    const visibleContacts = contactsFilter();\n\n    return (\n        <main>\n            <GlobalStyles></GlobalStyles>\n            <h1>Phonebook</h1>\n            <ContactsForm addContact={addContact}/>\n            <Filter \n                value={filter} \n                onChange={onFilterChange}\n            />\n            <h2>Contacts</h2>\n            <ContactsList \n                contacts={visibleContacts} \n                removeContactById={removeContactById}\n            />\n        </main>\n\n    );\n};\n\nexport default App;\n\n// class App extends Component {\n//     state = { \n//         contacts: [],\n//         filter: ''\n//     };\n\n//     componentDidMount() {\n//         const contactsArr = localStorage.getItem('contacts');\n//         const parsedContacts = JSON.parse(contactsArr);\n\n//         if(parsedContacts) {\n//             this.setState({contacts: parsedContacts});\n//         };\n//     };\n\n//     componentDidUpdate(prevProps, prevState) {\n//         if (this.state.contacts !== prevState.contacts) {\n//             localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//         };\n//     };\n\n//     addContact = (contact) => {\n//         const {contacts} = this.state;\n//         const isCopy = contacts.some((item) => \n//                item.name.toLowerCase() === contact.name.toLowerCase()\n//             );\n//         if(isCopy) {\n//             alert(`${contact.name} is already in contacts.`);\n//             return;\n//         }\n//         this.setState((prev) => ({\n//             contacts: [...prev.contacts, contact]\n//         }));\n//     };\n\n//     removeContactById = (id) => {\n//         this.setState((prev) => ({\n//             contacts: [...prev.contacts.filter(contact => contact.id !== id)]\n//         }));\n//     };\n\n//     onFilterChange = (e) => {\n//         const {name, value} = e.target;\n//         this.setState({ [name]: value });\n//     };\n\n//     contactsFilter = (e) => {\n//         const {contacts, filter} = this.state;\n//         const normalizedFilter = filter.toLowerCase();\n//         return contacts.filter(contact => \n//             contact.name.toLowerCase().includes(normalizedFilter)\n//         );\n//     };\n\n//     render() {\n//         const visibleContacts = this.contactsFilter();\n//         return (\n//             <main>\n//                 <GlobalStyles></GlobalStyles>\n//                 <h1>Phonebook</h1>\n//                 <ContactsForm addContact={this.addContact}/>\n//                 <Filter \n//                     value={this.state.filter} \n//                     onChange={this.onFilterChange}\n//                 />\n//                 <h2>Contacts</h2>\n//                 <ContactsList \n//                     contacts={visibleContacts} \n//                     removeContactById={this.removeContactById}\n//                 />\n//             </main>\n\n//         );\n//     }\n// }\n\n// export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}